---
// src/pages/debug-smartbed.astro - Debug Smart Bed data ‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô Hero
import { wpQuery } from "../lib/wp";

// Test GraphQL query ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Smart Bed ‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô Hero pattern
const SMARTBED_DEBUG_QUERY = /* GraphQL */ `
  query SmartBedDebug {
    pages(first: 10, where: { status: PUBLISH }) {
      nodes {
        id
        title
        uri
        slug
        isFrontPage
        language {
          code
          name
        }
        # ‡∏•‡∏≠‡∏á‡∏î‡∏π ACF fields ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
        hero {
          heroTitle
          heroSubtitle
        }
        smartbed {
          smartbedtitle
          smartbedsub
          smartbedimage {
            node {
              sourceUrl
              altText
            }
          }
        }
      }
    }
  }
`;

// ‡∏•‡∏≠‡∏á query ‡πÅ‡∏ö‡∏ö nodeByUri ‡∏î‡πâ‡∏ß‡∏¢ - ‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô Hero
const URI_DEBUG_QUERY = /* GraphQL */ `
  query DebugByUri($uri: String!) {
    nodeByUri(uri: $uri) {
      ... on Page {
        id
        title
        hero {
          heroTitle
        }
        smartbed {
          smartbedtitle
          smartbedsub
          smartbedimage {
            node {
              sourceUrl
            }
          }
        }
      }
    }
  }
`;

let allPagesResult = null;
let uriResults = [];

try {
  allPagesResult = await wpQuery<any>(SMARTBED_DEBUG_QUERY);
} catch (e) {
  allPagesResult = { error: e.message };
}

// ‡∏•‡∏≠‡∏á URI ‡∏´‡∏•‡∏≤‡∏¢‡∏ï‡∏±‡∏ß‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô Hero
const testUris = ["/", "/th", "/en", "/home", "/‡∏´‡∏ô‡πâ‡∏≤‡πÅ‡∏£‡∏Å"];

for (const uri of testUris) {
  try {
    const result = await wpQuery<any>(URI_DEBUG_QUERY, { uri });
    uriResults.push({ uri, data: result, success: true });
  } catch (e) {
    uriResults.push({ uri, error: e.message, success: false });
  }
}

// ‡∏•‡∏≠‡∏á‡∏î‡∏π GraphQL Schema
const SCHEMA_QUERY = /* GraphQL */ `
  query SchemaDebug {
    __type(name: "Page") {
      fields {
        name
        type {
          name
          fields {
            name
            type {
              name
            }
          }
        }
      }
    }
  }
`;

let schemaResult = null;
try {
  schemaResult = await wpQuery<any>(SCHEMA_QUERY);
} catch (e) {
  schemaResult = { error: e.message };
}

// ‡∏™‡∏£‡∏∏‡∏õ‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå
const pagesWithSmartbed = allPagesResult?.pages?.nodes?.filter((p: any) => p.smartbed) || [];
const pagesWithHero = allPagesResult?.pages?.nodes?.filter((p: any) => p.hero) || [];
---

<!DOCTYPE html>
<html lang="th">
<head>
  <meta charset="utf-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1" />
  <title>Debug Smart Bed</title>
  <style>
    body { 
      font-family: system-ui; 
      padding: 2rem; 
      line-height: 1.6; 
      background: #f8f9fa;
    }
    .container {
      max-width: 1200px;
      margin: 0 auto;
    }
    .section { 
      margin: 2rem 0; 
      padding: 1.5rem; 
      border: 1px solid #ddd; 
      border-radius: 12px; 
      background: white;
      box-shadow: 0 2px 4px rgba(0,0,0,0.1);
    }
    .success { 
      border-color: #22c55e; 
      background: #f0fdf4; 
    }
    .error { 
      border-color: #ef4444; 
      background: #fef2f2; 
    }
    .warning {
      border-color: #f59e0b;
      background: #fffbeb;
    }
    pre { 
      background: #1e293b; 
      color: #e2e8f0;
      padding: 1rem; 
      border-radius: 8px; 
      overflow-x: auto; 
      font-size: 14px;
    }
    .highlight {
      background: #fef3c7;
      padding: 2px 4px;
      border-radius: 4px;
      font-weight: 600;
    }
    .grid {
      display: grid;
      grid-template-columns: 1fr 1fr;
      gap: 2rem;
    }
    @media (max-width: 768px) {
      .grid { grid-template-columns: 1fr; }
    }
    .status-badge {
      display: inline-block;
      padding: 4px 12px;
      border-radius: 20px;
      font-size: 12px;
      font-weight: 600;
      text-transform: uppercase;
    }
    .status-ok { background: #dcfce7; color: #166534; }
    .status-error { background: #fee2e2; color: #991b1b; }
    .status-warning { background: #fef3c7; color: #92400e; }
    .comparison {
      display: grid;
      grid-template-columns: 1fr 1fr;
      gap: 1rem;
      margin: 1rem 0;
    }
    .comparison div {
      padding: 1rem;
      border-radius: 8px;
      border: 1px solid #ddd;
    }
    .working { background: #f0fdf4; border-color: #22c55e; }
    .broken { background: #fef2f2; border-color: #ef4444; }
  </style>
</head>
<body>
  <div class="container">
    <h1>üõèÔ∏è Smart Bed vs üè† Hero Debug Comparison</h1>
    
    <div class="section">
      <h2>üìä Summary</h2>
      <div class="comparison">
        <div class="working">
          <h3>üè† Hero (Working)</h3>
          <p><strong>Pages with Hero:</strong> {pagesWithHero.length}</p>
          <p><strong>Hero Fields:</strong> heroTitle, heroSubtitle</p>
          <p><strong>Status:</strong> <span class="status-ok">Working</span></p>
        </div>
        <div class="broken">
          <h3>üõèÔ∏è Smart Bed (Testing)</h3>
          <p><strong>Pages with SmartBed:</strong> {pagesWithSmartbed.length}</p>
          <p><strong>SmartBed Fields:</strong> smartbedTitle, smartbedSub</p>
          <p><strong>Status:</strong> 
            <span class={`status-badge ${pagesWithSmartbed.length > 0 ? 'status-ok' : 'status-error'}`}>
              {pagesWithSmartbed.length > 0 ? 'Found Data' : 'No Data'}
            </span>
          </p>
        </div>
      </div>
    </div>

    <div class={`section ${allPagesResult?.error ? 'error' : 'success'}`}>
      <h2>1. All Pages Analysis</h2>
      {allPagesResult?.error ? (
        <div>
          <p><strong>‚ùå Query Failed</strong></p>
          <p>Error: {allPagesResult.error}</p>
        </div>
      ) : (
        <div>
          <p><strong>‚úÖ Found {allPagesResult?.pages?.nodes?.length || 0} pages</strong></p>
          
          {allPagesResult?.pages?.nodes?.map((page: any, index: number) => (
            <div key={page.id} style="margin: 1rem 0; padding: 1rem; background: #f8f9fa; border-radius: 8px;">
              <h3>{page.title} <span style="font-size: 14px; color: #666;">({page.language?.code})</span></h3>
              <p><strong>URI:</strong> {page.uri} | <strong>Slug:</strong> {page.slug}</p>
              <p><strong>Is Front Page:</strong> {page.isFrontPage ? '‚úÖ Yes' : '‚ùå No'}</p>
              
              <div class="comparison">
                <div class="working">
                  <h4>üè† Hero Fields:</h4>
                  <p><strong>heroTitle:</strong> <span class="highlight">{page.hero?.heroTitle || '‡πÑ‡∏°‡πà‡∏°‡∏µ'}</span></p>
                  <p><strong>heroSubtitle:</strong> {page.hero?.heroSubtitle ? '‚úÖ ‡∏°‡∏µ' : '‚ùå ‡πÑ‡∏°‡πà‡∏°‡∏µ'}</p>
                </div>
                <div class={page.smartbed ? 'working' : 'broken'}>
                  <h4>üõèÔ∏è Smart Bed Fields:</h4>
                  <p><strong>smartbedtitle:</strong> <span class="highlight">{page.smartbed?.smartbedtitle || '‡πÑ‡∏°‡πà‡∏°‡∏µ'}</span></p>
                  <p><strong>smartbedsub:</strong> {page.smartbed?.smartbedsub ? '‚úÖ ‡∏°‡∏µ' : '‚ùå ‡πÑ‡∏°‡πà‡∏°‡∏µ'}</p>
                  <p><strong>smartbedimage:</strong> {page.smartbed?.smartbedimage?.node?.sourceUrl ? '‚úÖ ‡∏°‡∏µ‡∏£‡∏π‡∏õ' : '‚ùå ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏£‡∏π‡∏õ'}</p>
                </div>
              </div>
            </div>
          ))}
        </div>
      )}
    </div>

    <div class="section">
      <h2>2. URI-based Query Tests (‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô Hero pattern)</h2>
      <div class="grid">
        {uriResults.map((result, index) => (
          <div key={index} class={result.success ? 'success' : 'error'} style="padding: 1rem; border-radius: 8px; border: 1px solid #ddd; margin: 0.5rem 0;">
            <h3>URI: {result.uri}</h3>
            {result.success ? (
              <div>
                <p><strong>‚úÖ Success</strong></p>
                {result.data?.nodeByUri ? (
                  <div>
                    <p><strong>Page:</strong> {result.data.nodeByUri.title}</p>
                    <div class="comparison" style="font-size: 0.9rem;">
                      <div>
                        <strong>üè† Hero:</strong> {result.data.nodeByUri.hero?.heroTitle ? '‚úÖ Found' : '‚ùå None'}
                      </div>
                      <div>
                        <strong>üõèÔ∏è SmartBed:</strong> {result.data.nodeByUri.smartbed?.smartbedtitle ? '‚úÖ Found' : '‚ùå None'}
                      </div>
                    </div>
                  </div>
                ) : (
                  <p><strong>‚ö†Ô∏è No page found</strong></p>
                )}
              </div>
            ) : (
              <div>
                <p><strong>‚ùå Failed</strong></p>
                <p>Error: {result.error}</p>
              </div>
            )}
          </div>
        ))}
      </div>
    </div>

    <div class="section warning">
      <h2>üîß Troubleshooting Steps</h2>
      
      {pagesWithSmartbed.length === 0 ? (
        <div style="margin: 1rem 0; padding: 1rem; background: #fee2e2; border-radius: 8px;">
          <h3>‚ùå No Smart Bed data found - Copy Hero setup!</h3>
          <p><strong>Solution: ‡∏™‡∏£‡πâ‡∏≤‡∏á SmartBed Field Group ‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô Hero ‡∏ó‡∏µ‡πà‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ:</strong></p>
          <ol>
            <li><strong>‡πÑ‡∏õ‡∏ó‡∏µ‡πà ACF ‚Üí Field Groups ‚Üí Add New</strong></li>
            <li><strong>Basic Settings:</strong>
              <ul>
                <li>Title: "SmartBed" (‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô Hero)</li>
                <li>‡πÄ‡∏û‡∏¥‡πà‡∏° Fields: smartbedtitle (Text), smartbedsub (Textarea), smartbedimage (Image)</li>
              </ul>
            </li>
            <li><strong>Settings Tab:</strong>
              <ul>
                <li>‚úÖ Show in GraphQL: ‡πÄ‡∏õ‡∏¥‡∏î</li>
                <li>üìù GraphQL Field Name: "smartbed" (lowercase, ‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô hero)</li>
              </ul>
            </li>
            <li><strong>Each Field Settings:</strong>
              <ul>
                <li>‚úÖ Show in GraphQL: ‡πÄ‡∏õ‡∏¥‡∏î‡∏ó‡∏∏‡∏Å field</li>
                <li>üìù GraphQL Field Names: "smartbedtitle", "smartbedsub", "smartbedimage" (lowercase!)</li>
              </ul>
            </li>
            <li><strong>Location Rules:</strong>
              <ul>
                <li>üìç Post Type == Page (‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô Hero)</li>
              </ul>
            </li>
          </ol>
        </div>
      ) : (
        <div style="margin: 1rem 0; padding: 1rem; background: #dcfce7; border-radius: 8px;">
          <h3>‚úÖ Smart Bed data found!</h3>
          <p>Field Group ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡πÅ‡∏•‡πâ‡∏ß ‡∏ï‡∏≠‡∏ô‡∏ô‡∏µ‡πâ:</p>
          <ol>
            <li>‡πÑ‡∏õ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô Page ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£</li>
            <li>‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ SmartBedSection component ‡πÉ‡∏ä‡πâ‡πÑ‡∏î‡πâ</li>
            <li>‡∏•‡∏ö‡πÑ‡∏ü‡∏•‡πå debug ‡∏ô‡∏µ‡πâ</li>
            <li><a href="/th">‡πÑ‡∏õ‡∏î‡∏π‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏ß‡πá‡∏ö‡∏´‡∏•‡∏±‡∏Å</a></li>
          </ol>
        </div>
      )}
    </div>

    <div class="section">
      <h2>üìã Raw Data</h2>
      <details>
        <summary>All Pages Result</summary>
        <pre>{JSON.stringify(allPagesResult, null, 2)}</pre>
      </details>
      <details>
        <summary>URI Test Results</summary>
        <pre>{JSON.stringify(uriResults, null, 2)}</pre>
      </details>
      <details>
        <summary>GraphQL Schema</summary>
        <pre>{JSON.stringify(schemaResult, null, 2)}</pre>
      </details>
    </div>

    <div class="section">
      <h2>üöÄ Next Steps</h2>
      <ol>
        <li><strong>‡∏´‡∏≤‡∏Å SmartBed ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•:</strong> ‡∏™‡∏£‡πâ‡∏≤‡∏á Field Group ‡∏ï‡∏≤‡∏° troubleshooting ‡∏î‡πâ‡∏≤‡∏ô‡∏ö‡∏ô</li>
        <li><strong>‡∏´‡∏≤‡∏Å SmartBed ‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏•‡πâ‡∏ß:</strong> ‡πÑ‡∏õ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô WordPress Page</li>
        <li><strong>‡∏ó‡∏î‡∏™‡∏≠‡∏ö SmartBedSection:</strong> ‡∏î‡∏π‡∏ß‡πà‡∏≤ debug info ‡πÅ‡∏™‡∏î‡∏á "Found Data: ‚úÖ Yes" ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà</li>
        <li><strong>‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÄ‡∏™‡∏£‡πá‡∏à‡πÅ‡∏•‡πâ‡∏ß:</strong> ‡∏•‡∏ö‡πÑ‡∏ü‡∏•‡πå debug-smartbed.astro ‡∏ô‡∏µ‡πâ</li>
        <li><strong>‡∏î‡∏π‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå:</strong> <a href="/th" style="color: #2563eb;">‡πÑ‡∏õ‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏ß‡πá‡∏ö‡∏´‡∏•‡∏±‡∏Å</a></li>
      </ol>
    </div>
  </div>
</body>
</html>